package com.example.health2

import android.annotation.SuppressLint
import android.app.AlarmManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.text.format.DateFormat
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : AppCompatActivity() {

    @SuppressLint("WrongViewCast")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // BMI Calculator
        val etHeight = findViewById<EditText>(R.id.etHeight)
        val etWeight = findViewById<EditText>(R.id.etWeight)
        val btnCalculateBmi = findViewById<Button>(R.id.btnCalculateBmi)
        val tvBmiResult = findViewById<TextView>(R.id.tvBmiResult)

        btnCalculateBmi.setOnClickListener {
            val heightCm = etHeight.text.toString().toDoubleOrNull()
            val weightKg = etWeight.text.toString().toDoubleOrNull()

            if (heightCm != null && weightKg != null) {
                val heightM = heightCm / 100
                val bmi = weightKg / (heightM * heightM)
                tvBmiResult.text = String.format("BMI: %.2f", bmi)
                // Display a toast message based on the BMI value
                val bmiMessage = when {
                    bmi < 18.5 -> "Underweight"
                    bmi in 18.5..24.9 -> "Normal weight"
                    bmi in 25.0..29.9 -> "Overweight"
                    else -> "Obesity"
                }
                Toast.makeText(this, bmiMessage, Toast.LENGTH_SHORT).show()
            } else {
                Toast.makeText(this, "Please enter valid height and weight", Toast.LENGTH_SHORT).show()
            }
        }

        // Drink Water Notification
        val switchDrinkWater = findViewById<Switch>(R.id.switchDrinkWater)

        switchDrinkWater.setOnCheckedChangeListener { _, isChecked ->
            val alarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager
            val intent = Intent(this, DrinkWaterReceiver::class.java)
            val pendingIntent = PendingIntent.getBroadcast(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT)

            if (isChecked) {
                val interval = AlarmManager.INTERVAL_HOUR // Set your desired interval
                alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), interval, pendingIntent)
                Toast.makeText(this, "Drink water reminder enabled", Toast.LENGTH_SHORT).show()
            } else {
                alarmManager.cancel(pendingIntent)
                Toast.makeText(this, "Drink water reminder disabled", Toast.LENGTH_SHORT).show()
            }
        }

        // Fitness and Diet Plans
        val cbPaleo = findViewById<CheckBox>(R.id.rbPaleo)
        val cbKeto = this.findViewById<CheckBox>(R.id.rbKeto)
        val cbLowCarb = findViewById<CheckBox>(R.id.rbLowCarb)
        val cbWhole30 = findViewById<CheckBox>(R.id.rbWhole30)
        val cbVegan = findViewById<CheckBox>(R.id.rbVegan)
        val ivDietPlan = findViewById<ImageView>(R.id.ivDietPlan)

        val dietImages = mapOf(
            R.id.rbPaleo to R.drawable.paleo,
            R.id.rbKeto to R.drawable.keto,
            R.id.rbLowCarb to R.drawable.low_carb,
            R.id.rbWhole30 to R.drawable.whole30,
            R.id.rbVegan to R.drawable.vegan
        )

        val checkboxes = listOf(cbPaleo, cbKeto, cbLowCarb, cbWhole30, cbVegan)

        checkboxes.forEach { checkbox ->
            checkbox.setOnCheckedChangeListener { _, isChecked ->
                if (isChecked) {
                    checkboxes.forEach {
                        if (it != checkbox) it.isChecked = false
                    }
                    ivDietPlan.setImageResource(dietImages[checkbox.id] ?: 0)
                    ivDietPlan.visibility = ImageView.VISIBLE
                } else {
                    ivDietPlan.visibility = ImageView.GONE
                }
            }
        }

        // Period Tracker
        val etPeriodStartDate = findViewById<EditText>(R.id.etPeriodStartDate)
        val etPeriodDuration = findViewById<EditText>(R.id.etPeriodDuration)
        val btnPredictPeriod = findViewById<Button>(R.id.btnPredictPeriod)
        val tvNextPeriod = findViewById<TextView>(R.id.tvNextPeriod)

        btnPredictPeriod.setOnClickListener {
            val startDateStr = etPeriodStartDate.text.toString()
            val durationStr = etPeriodDuration.text.toString()

            val dateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
            val calendar = Calendar.getInstance()
            val nextPeriodCalendar = Calendar.getInstance()

            try {
                val startDate = dateFormat.parse(startDateStr)
                val duration = durationStr.toInt()

                calendar.time = startDate
                calendar.add(Calendar.DAY_OF_MONTH, duration)

                nextPeriodCalendar.time = calendar.time
                nextPeriodCalendar.add(Calendar.MONTH, 1)

                val nextPeriodDate = dateFormat.format(nextPeriodCalendar.time)
                tvNextPeriod.text = "Next Period: $nextPeriodDate"
            } catch (e: Exception) {
                showToast("Invalid input: ${e.message}")
            }
        }

        // Sleep Tracker
        val etSleepStart = findViewById<EditText>(R.id.etSleepStart)
        val etSleepEnd = findViewById<EditText>(R.id.etSleepEnd)
        val btnTrackSleep = findViewById<Button>(R.id.btnTrackSleep)
        val tvSleepDuration = findViewById<TextView>(R.id.tvSleepDuration)
        val tvSleepMessage = findViewById<TextView>(R.id.tvSleepMessage)

        btnTrackSleep.setOnClickListener {
            val sleepStartStr = etSleepStart.text.toString()
            val sleepEndStr = etSleepEnd.text.toString()

            val timeFormat = SimpleDateFormat("hh:mm a", Locale.getDefault())
            val calendarStart = Calendar.getInstance()
            val calendarEnd = Calendar.getInstance()

            try {
                val sleepStart = timeFormat.parse(sleepStartStr)
                val sleepEnd = timeFormat.parse(sleepEndStr)

                if (sleepStart != null && sleepEnd != null) {
                    calendarStart.time = sleepStart
                    calendarEnd.time = sleepEnd

                    val sleepDuration = calendarEnd.timeInMillis - calendarStart.timeInMillis
                    val hours = sleepDuration / (1000 * 60 * 60)
                    val minutes = (sleepDuration % (1000 * 60 * 60)) / (1000 * 60)

                    // Adjust for overnight sleep
                    if (hours < 0) {
                        calendarEnd.add(Calendar.DAY_OF_MONTH, 1)
                        val adjustedSleepDuration = calendarEnd.timeInMillis - calendarStart.timeInMillis
                        val adjustedHours = adjustedSleepDuration / (1000 * 60 * 60)
                        val adjustedMinutes = (adjustedSleepDuration % (1000 * 60 * 60)) / (1000 * 60)
                        tvSleepDuration.text = "Sleep Duration: $adjustedHours hours and $adjustedMinutes minutes"
                    } else {
                        tvSleepDuration.text = "Sleep Duration: $hours hours and $minutes minutes"
                    }

                    // Message based on sleep timing
                    val sleepStartHour = calendarStart.get(Calendar.HOUR_OF_DAY)
                    val sleepEndHour = calendarEnd.get(Calendar.HOUR_OF_DAY)

                    val message = when {
                        sleepEndHour < sleepStartHour -> "You may have slept during the day."
                        hours < 6 -> "You might need more sleep."
                        hours in 6..8 -> "Good sleep duration!"
                        else -> "You slept more than usual."
                    }

                    tvSleepMessage.text = message
                } else {
                    showToast("Invalid input")
                }
            } catch (e: Exception) {
                showToast("Invalid input: ${e.message}")
            }
        }

        // Mental Health Tips
        val tips = listOf(
            "Every day is a new beginning. Take a deep breath and start again.",
            "Celebrate small victories; they lead to big achievements.",
            "You are stronger than you think and more beautiful than you know.",
            "Embrace the journey, not just the destination.",
            "Take time to do what makes your soul happy."
        )

        val btnGetTip = findViewById<Button>(R.id.btnGetTip)
        val tvMentalHealthTip = findViewById<TextView>(R.id.tvMentalHealthTip)

        btnGetTip.setOnClickListener {
            val randomTip = tips.random()
            tvMentalHealthTip.text = randomTip
        }

        // Social Sharing
        val btnShareAchievement = findViewById<Button>(R.id.btnShareAchievement)

        btnShareAchievement.setOnClickListener {
            val shareIntent = Intent().apply {
                action = Intent.ACTION_SEND
                putExtra(Intent.EXTRA_TEXT, "I just achieved a new milestone in my health journey!")
                type = "text/plain"
            }
            startActivity(Intent.createChooser(shareIntent, "Share via"))
        }
    }

    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }
}




******DrinWaterReceiver.kt***********

package com.example.health2

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.widget.Toast

class DrinkWaterReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context, intent: Intent) {
        Toast.makeText(context, "Time to drink water!", Toast.LENGTH_SHORT).show()
    }
}
